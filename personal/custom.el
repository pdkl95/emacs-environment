(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(adaptive-fill-mode nil)
 '(blink-cursor-mode nil)
 '(clean-buffer-list-delay-general 2)
 '(coffee-tab-width 2)
 '(column-number-mode nil)
 '(completions-format (quote vertical))
 '(custom-safe-themes (quote ("5f573dfd6ef8f90d0c33de7d482daba81399f276" default)))
 '(delete-active-region (quote kill))
 '(electric-pair-mode nil)
 '(fringe-mode (quote (4 . 4)) nil (fringe))
 '(global-hl-line-mode nil)
 '(global-pretty-lambda-mode t)
 '(ido-enable-dot-prefix t)
 '(ido-enable-prefix t)
 '(ido-everywhere t)
 '(ido-record-ftp-work-directories nil)
 '(indicate-empty-lines t)
 '(inhibit-startup-echo-area-message "endymion")
 '(initial-scratch-message nil)
 '(kill-do-not-save-duplicates t)
 '(markdown-command "redcarpet")
 '(midnight-delay 36000)
 '(midnight-mode t nil (midnight))
 '(mouse-avoidance-mode (quote banish) nil (avoid))
 '(prelude-disable-arrow-navigation nil)
 '(prelude-start-slime-automatically nil)
 '(read-buffer-completion-ignore-case t)
 '(read-file-name-completion-ignore-case t)
 '(require-final-newline t)
 '(ruby-block-highlight-toggle t)
 '(scroll-bar-mode (quote right))
 '(scss-compile-at-save nil)
 '(server-mode t)
 '(show-paren-mode t)
 '(show-paren-style (quote parenthesis))
 '(size-indication-mode t)
 '(smex-save-file "~/.emacs.d/personal/.smex-items")
 '(text-mode-hook (quote (prelude-turn-on-flyspell text-mode-hook-identify)))
 '(tool-bar-mode t)
 '(visual-line-fringe-indicators (quote (left-curly-arrow right-curly-arrow)))
 '(whitespace-action (quote (auto-cleanup warn-if-read-only)))
 '(whitespace-display-mappings nil)
 '(whitespace-style (quote (trailing empty)))
 '(windmove-wrap-around t)
 '(xterm-mouse-mode t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "#0b0b0b" :foreground "#92b6f4" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 87 :width normal :foundry "xos4" :family "Terminus"))))
 '(css-proprietary-property ((t (:inherit css-property :background "#171005"))))
 '(css-selector ((t (:inherit font-lock-builtin-face))))
 '(cursor ((t (:background "#ADA8F2"))))
 '(dropdown-list-face ((t (:inherit modeline))))
 '(dropdown-list-selection-face ((t (:inherit modeline-highlight))))
 '(error ((t (:background "#6b0a1e" :foreground "#ffeefb" :underline "#ff3111" :weight bold))))
 '(escape-glyph ((t (:background "DodgerBlue4" :foreground "#B4B1FF" :box (:line-width 1 :color "light slate blue")))))
 '(flymake-errline ((t (:background "Firebrick4" :underline "firebrick"))))
 '(font-lock-builtin-face ((t (:foreground "light green"))))
 '(font-lock-comment-delimiter-face ((t (:inherit font-lock-comment-face :background "#2a0a0a" :foreground "#ff0000"))))
 '(font-lock-comment-face ((t (:foreground "#f23331"))))
 '(font-lock-function-name-face ((t (:foreground "#3156ff" :weight bold))))
 '(font-lock-keyword-face ((t (:foreground "#24ddee" :weight bold))))
 '(font-lock-negation-char-face ((t (:foreground "maroon1" :weight bold))))
 '(font-lock-variable-name-face ((t (:foreground "wheat"))))
 '(font-lock-warning-face ((t (:inherit error :background "#510715" :foreground "#fcefeb" :underline "#ff3516"))))
 '(ido-only-match ((t (:inherit font-lock-keyword-face :foreground "#24ddee"))))
 '(isearch ((t (:background "plum" :foreground "#5b1313"))))
 '(js2-error ((t (:inherit font-lock-warning-face :foreground "#fcefeb"))))
 '(js2-external-variable ((t (:inherit sh-quoted-exec :foreground "IndianRed1"))))
 '(js2-function-param ((t (:foreground "SpringGreen3"))))
 '(js2-instance-member ((t (:inherit font-lock-constant-face :foreground "#a47bff"))))
 '(js2-magic-paren ((t (:inherit font-lock-preprocessor-face))))
 '(js2-warning ((t (:underline "#ffca10"))))
 '(link ((t (:inherit font-lock-function-name-face))))
 '(minibuffer-prompt ((t (:inherit font-lock-keyword-face))))
 '(outline-1 ((t (:inherit rainbow-delimiters-depth-1-face))))
 '(outline-2 ((t (:inherit rainbow-delimiters-depth-2-face))))
 '(outline-3 ((t (:inherit rainbow-delimiters-depth-3-face))))
 '(outline-4 ((t (:inherit rainbow-delimiters-depth-4-face))))
 '(outline-5 ((t (:inherit rainbow-delimiters-depth-5-face))))
 '(outline-6 ((t (:inherit rainbow-delimiters-depth-6-face))))
 '(outline-7 ((t (:inherit rainbow-delimiters-depth-7-face))))
 '(outline-8 ((t (:inherit rainbow-delimiters-depth-8-face))))
 '(rainbow-delimiters-depth-1-face ((t (:foreground "deep sky blue"))))
 '(rainbow-delimiters-depth-2-face ((t (:foreground "light slate blue"))))
 '(rainbow-delimiters-depth-3-face ((t (:foreground "dodger blue"))))
 '(rainbow-delimiters-depth-4-face ((t (:foreground "#00ca8a"))))
 '(rainbow-delimiters-depth-5-face ((t (:foreground "yellow green"))))
 '(rainbow-delimiters-depth-6-face ((t (:foreground "DarkGoldenrod2"))))
 '(rainbow-delimiters-depth-7-face ((t (:foreground "firebrick2"))))
 '(rainbow-delimiters-depth-8-face ((t (:foreground "magenta2"))))
 '(rainbow-delimiters-depth-9-face ((t (:foreground "DeepSkyBlue2"))))
 '(rainbow-delimiters-unmatched-face ((t (:background "#001a16" :foreground "SpringGreen2"))))
 '(region ((t (:background "#1d182e"))))
 '(sh-heredoc ((t (:background "dark slate blue" :foreground "CadetBlue1"))))
 '(sh-quoted-exec ((t (:foreground "IndianRed1"))))
 '(show-paren-match ((t (:background "#0a273c" :foreground "DarkSlateGray2" :overline "medium spring green" :underline "medium spring green" :weight extra-bold))))
 '(show-paren-mismatch ((t (:background "blue violet" :foreground "white smoke" :overline "red2" :underline "red2"))))
 '(strokes-char ((t (:background "black"))))
 '(tool-bar ((t (:inherit modeline :background "#131313" :foreground "#a47bff" :box (:line-width -1 :color "#5276b4")))))
 '(tooltip ((t (:inherit modeline :background "#131313" :foreground "#a47bff"))))
 '(variable-pitch ((t (:stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 1.0 :width normal :foundry "bitstream" :family "bitstream vera sans")))))
